{"version":3,"sources":["components/graph3d/networkD3.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["NetworkChart","props","data","nodeId","d","id","nodeGroup","nodeGroups","nodeTitle","name","nodeFill","nodeStroke","nodeStrokeWidth","nodeStrokeOpacity","nodeRadius","nodeStrength","linkSource","source","linkTarget","target","linkStroke","linkStrokeOpacity","linkStrokeWidth","linkStrokeLinecap","linkStrength","width","height","handleSetCluster","cluster","colors","d3","useState","contextmenuData","setContextmenuData","svgRef","useRef","contextRef","useEffect","dimensions","margins","containerWidth","containerHeight","svg","current","classed","attr","style","selectAll","remove","container","append","N","nodes","map","intern","links","undefined","_","i","T","G","W","L","console","log","color","forceNode","forceManyBody","forceLink1","forceLink","index","strength","simulation","forceSimulation","force","distance","distanceMin","distanceMax","forceCenter","on","link","x","y","node","call","dragstarted","dragged","dragended","text","city","group","zoom","event","select","transform","drag","evt","textElems","join","enter","transition","duration","selection","update","exit","stopPropagation","preventDefault","pageX","pageY","html","label","division","conference","value","valueOf","active","alphaTarget","restart","subject","fx","fy","contextContainer","Object","keys","length","className","position","ref","Main","chart","setData","page","size","setSize","setCluster","testData","nodesForUse","forEach","push","j","edges","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56ae5551.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport {drag} from 'd3-drag';\nimport {\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation,\n  forceCollide,\n  forceX,\n  forceY,\n  // forceProperties,\n} from 'd3-force';\nimport { zoom, zoomidentity } from 'd3-zoom';\n\nconst NetworkChart = (props) => {\n  let {data,\n    nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n    nodeGroup, // given d in nodes, returns an (ordinal) value for color\n    nodeGroups, // an array of ordinal values representing the node groups\n    nodeTitle = (d) => d.name, // given d in nodes, a title string\n    nodeFill = 'currentColor', // node stroke fill (if not using a group color encoding)\n    nodeStroke = '#fff', // node stroke color\n    nodeStrokeWidth = 1.5, // node stroke width, in pixels\n    nodeStrokeOpacity = 1, // node stroke opacity\n    nodeRadius = 25, // node radius, in pixels\n    nodeStrength,\n    linkSource = ({source}) => source, // given d in links, returns a node identifier string\n    linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n    linkStroke = '#999', // link stroke color\n    linkStrokeOpacity = 0.6, // link stroke opacity\n    linkStrokeWidth = 9.5, // given d in links, returns a stroke width in pixels\n    linkStrokeLinecap = 'round', // link stroke linecap\n    linkStrength,\n    width,\n    height,\n    cluster,\n    handleSetCluster\n  } = props;\n  const colors = d3.schemeTableau10;\n  const [contextmenuData, setContextmenuData] = useState({});\n  const svgRef = useRef(null);\n  const contextRef = useRef(null);\n\n  useEffect(() => {\n    // D3 Code\n\n    // Dimensions\n    let dimensions = {\n      width: props.width,\n      height: props.height,\n      margins: 50,\n    };\n\n    dimensions.containerWidth = dimensions.width - dimensions.margins * 2;\n    dimensions.containerHeight = dimensions.height - dimensions.margins * 2;\n\n    // SELECTIONS\n    const svg = d3\n      .select(svgRef.current)\n      .classed('network-chart', true)\n      .attr('width', dimensions.width)\n      .attr('height', dimensions.height)\n      .style('background-color', '#f5f5f5');\n\n\n    // clear all previous content on refresh\n    const everything = svg.selectAll('*');\n    everything.remove();\n    \n    const container = svg\n      .append('g')\n      .classed('container', true)\n      .attr('transform', `translate(${dimensions.margins}, ${dimensions.margins})`);\n\n\n    const N = d3.map(data.nodes, nodeId).map(intern);\n    const LS = d3.map(data.links, linkSource).map(intern);\n    const LT = d3.map(data.links, linkTarget).map(intern);\n    if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n    const T = nodeTitle == null ? null : d3.map(data.nodes, nodeTitle);\n    const G = nodeGroup == null ? null : d3.map(data.nodes, nodeGroup).map(intern);\n    const W = typeof linkStrokeWidth !== 'function' ? null : d3.map(data.links, linkStrokeWidth);\n    const L = typeof linkStroke !== 'function' ? null : d3.map(data.links, linkStroke);\n  \n    // Replace the input nodes and links with mutable objects for the simulation.\n    const links = data.links.map(d => ({...d}));\n    const nodes = data.nodes.map(d => ({...d}));\n    \n    console.log('nodes', nodes);\n    console.log('links', links);\n    // Compute default domains.\n    if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n  \n    // Construct the scales.\n    const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n    // Construct the forces.\n    const forceNode = forceManyBody();\n    const forceLink1 = forceLink(links).id(({index: i}) => N[i]);\n    if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n    if (linkStrength !== undefined) forceLink1.strength(linkStrength);\n  \n    const simulation = forceSimulation(nodes)\n      .force('link', forceLink(links).id(d => d.id).distance(100))\n      .force('charge', forceManyBody().distanceMin(200).distanceMax(1000))\n      .force('center', forceCenter(width / 2, height / 2))\n      .on('tick', ticked);\n    \n    const link = container.append('g')\n      .attr('stroke', typeof linkStroke !== 'function' ? linkStroke : null)\n      .attr('stroke-opacity', linkStrokeOpacity)\n      .attr('stroke-width', typeof linkStrokeWidth !== 'function' ? linkStrokeWidth : null)\n      .attr('stroke-linecap', linkStrokeLinecap)\n      .selectAll('line')\n      .data(links)\n      .join( // join takes 3 args: enter, update, exit\n        enter => enter.append('line')\n          .attr('x1', d => d.source.x)\n          .attr('y1', d => d.source.y)\n          .attr('x2', d => d.target.x)\n          .attr('y2', d => d.target.y)\n          .transition().duration(1000)\n          .style('opacity', 1)\n        // Note that as of v6, we have to call .selection() here\n        // This is because without it, we are returning the transition we've created,\n        // but selection.join() requires us to return a selection for enter and update groups\n        // (but not exit groups)\n          .selection()\n        ,\n        update => update\n          .transition().duration(1000)\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      );\n  \n    const node = container.append('g')\n      .attr('fill', nodeFill)\n      .attr('fill-opacity', 1)\n      .attr('stroke', nodeStroke)\n      .attr('stroke-opacity', nodeStrokeOpacity)\n      .attr('stroke-width', nodeStrokeWidth)\n      .selectAll('circle')\n      .data(nodes)\n      .join( // join takes 3 args: enter, update, exit\n        enter =>  enter.append('circle')\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .transition().duration(100)\n          // .style('opacity', d => d.group === d.label ? cluster ? 1 : 0 : 0)\n          \n        // Note that as of v6, we have to call .selection() here\n        // This is because without it, we are returning the transition we've created,\n        // but selection.join() requires us to return a selection for enter and update groups\n        // (but not exit groups)\n          .selection()\n          .on('click', (d) => console.log('d', d))\n          .on('dblclick', (event, d) => {\n            event.stopPropagation(); // auto zoom when double clicking node\n            handleSetCluster(d);\n          })\n          .on('contextmenu', (event, d) => {\n            console.log('context!', event, d);\n            event.preventDefault();\n            setContextmenuData(d);\n            d3.select('context-container')\n              .style('position', 'absolute')\n              .attr('position', 'absolute')\n              .style('left', event.pageX + 50 + 'px')\n              .style('top', event.pageY +'px');\n            var contextContainer = d3.select('g').append('div');\n            contextContainer\n              .append('div')\n              .style('position', 'absolute')\n              .attr('position', 'absolute')\n              .style('left', event.pageX + 50 + 'px')\n              .style('top', event.pageY +'px')\n              .classed('context-info', true)\n              .html(`${d.label} <br> Division: ${d.division} <br> Conference: ${d.conference}`);\n          }),\n        //   .on('mouseover', function (d) {\n        //     console.log('mouseover');\n        //     var div = d3.select(node).append('div')\n        //       .attr('pointer-events', 'none')\n        //       .attr('class', 'tooltip')\n        //       .style('opacity', 1)\n        //       .html('FIRST LINE <br> SECOND LINE')\n        //       .style('left', (d.x + 50 + 'px'))\n        //       .style('top', (d.y +'px'));\n        //   }),\n        update => update\n          .transition().duration(1000)\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      )\n      .attr('r', nodeRadius);\n\n    node.append('title')\n      .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n\n    const textElems = container\n      .append('g')\n      .selectAll('text')\n      .data(nodes)\n      .join( // join takes 3 args: enter, update, exit\n        enter => \n          enter\n            .append('text')\n            .text(node => node.label)\n            .attr('font-size',12)//font size\n            .attr('text-anchor', 'middle')\n            .attr('dx', node => node.x - 100)//positions text towards the left of the center of the circle\n            .attr('dy',node => node.y)\n            .attr('background-color', 'white')\n          // Note that as of v6, we have to call .selection() here\n          // This is because without it, we are returning the transition we've created,\n          // but selection.join() requires us to return a selection for enter and update groups\n          // (but not exit groups)\n            .selection(),\n        //   .on('mouseover', function (d) {\n        //     console.log('mouseover');\n        //     var div = d3.select(node).append('div')\n        //       .attr('pointer-events', 'none')\n        //       .attr('class', 'tooltip')\n        //       .style('opacity', 1)\n        //       .html('FIRST LINE <br> SECOND LINE')\n        //       .style('left', (d.x + 50 + 'px'))\n        //       .style('top', (d.y +'px'));\n        //   }),\n        update => update\n          .transition().duration(1000)\n          .attr('dx', d => d.x)\n          .attr('dy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      );\n  \n    if (W) link.attr('stroke-width', ({index: i}) => W[i]);\n    if (L) link.attr('stroke', ({index: i}) => L[i]);\n    if (G) node.attr('fill', ({index: i}) => color(G[i]));\n    if (T) node.append('title').text(({index: i}) => T[i]);\n    // if (invalidation != null) invalidation.then(() => simulation.stop());\n  \n    function intern(value) {\n      return value !== null && typeof value === 'object' ? value.valueOf() : value;\n    }\n  \n    function ticked() {\n      link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n      node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y)\n        .call(d3.drag()\n          .on('start', dragstarted)\n          .on('drag', dragged)\n          .on('end', dragended))\n        .append('text', true)\n        .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n      svg     \n        .call(zoom().on('zoom', (event) => {   // <-- `event` argument attaches to svg\n          svg.select('g').attr('transform', event.transform); // <-- use `event` here on svg child\n        }))\n        .call(\n          drag().on('drag', (evt) => {\n            svg.attr('cx', evt.x).attr('cy', evt.y);\n          })\n        );\n      // .on('click', (d) => setContextmenuData({}));\n      textElems\n        .attr('dx', d => d.x)\n        .attr('dy', d => d.y)\n        .call(d3.drag()\n          .on('start', dragstarted)\n          .on('drag', dragged)\n          .on('end', dragended))\n        .append('text', true)\n        .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n    }\n  \n\n    // Reheat the simulation when drag starts, and fix the subject position.\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n  \n    // Update the subject (dragged node) position during drag.\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n  \n    // Restore the target alpha so the simulation cools after dragging ends.\n    // Unfix the subject position now that it’s no longer being dragged.\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    const menuItems = [\n      {\n        title: 'First action',\n        action: (d) => {\n          // TODO: add any action you want to perform\n          console.log(d);\n        }\n      },\n      {\n        title: 'Second action',\n        action: (d) => {\n          // TODO: add any action you want to perform\n          console.log(d);\n        }\n      }\n    ];\n\n    const contextContainer = d3.select(contextRef.current)\n      .classed('context-div', true)\n      .attr('width',100)\n      .attr('height', 200);\n    if (contextmenuData && Object.keys(contextmenuData).length) {\n      // console.log(d3.select('context.info'));\n      // console.log('context coords:', contextmenuData, contextmenuData.x);\n      // .attr('x', contextmenuData.x)\n      // .attr('y', contextmenuData.y);\n      contextContainer\n        .append('div')\n        .classed('context-info', true)\n        .html(`${contextmenuData.label} <br> Division: ${contextmenuData.division} <br> Conference: ${contextmenuData.conference}`)\n        .style('left', (contextmenuData.x + 50 + 'px'))\n        .style('top', (contextmenuData.y +'px'));\n    } else {\n      svg.selectAll('context-div').style('display', 'none');\n    }\n  }, [props.data, svgRef.current, contextRef.current, contextmenuData]); // redraw chart if data changes\n  return (<div>\n    <div className=\"context-container\" style={{position: 'absolute'}} ref={contextRef} />\n    <svg ref={svgRef} />\n  </div>);\n};\n\nexport default NetworkChart;","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\n// import Network from '../network';\n// import Viz from '../graph3d/index';\n// import ForceGraph from '../graph3d/networkD3';\nimport NetworkChart from '../graph3d/networkD3';\nimport testData from './test-data.json';\n\nfunction Main () {\n  const [chart, setChart] = useState(null);\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [size, setSize] = useState([0, 0]);\n  const [cluster, setCluster] = useState(true);\n\n  function useWindowSize() {\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  useEffect(() => {\n    let dataRes = {};\n    // const fetchData = async (page) => {\n    //   dataRes = await getData(page);\n    //   if (dataRes && dataRes.data) {\n    //     setData(dataRes.data);\n    //   }\n    // };\n    if (!data.length) {\n      setData(testData);\n      // fetchData(page).catch((e) => {\n      //   console.log('error fetching', e);\n      // });\n    }\n  }, [page, chart, data.length]);\n\n  const handleAddPage = async () => {\n    if (page === 2) {\n      return;\n    }\n    setPage(page + 1);\n    await handleFetchData(page + 1);\n  };\n\n  const handleFetchData = async (page) => {\n    const response = await getData(page);\n    const prevData = data;\n    if (response && response.data) {\n      const newData = prevData.concat(response.data);\n      setData(newData);\n    }\n  };\n\n  const handleSetCluster = (d) => {\n    if (cluster[d.id]) {\n      setCluster({...cluster, [d.id]: false});\n    } else {\n      setCluster({...cluster, [d.id]: true});\n    }\n  };\n  // selectNode = (id) => () => {\n  //   const {anchored} = this.state;\n  //   anchored.push(id);\n  //   // this.setState({anchored});\n  // }\n\n  console.log('data is', testData);\n\n  const nodesForUse = [];\n  // eslint-disable-next-line no-unused-expressions\n  // data && data.length \n  //   ? data.forEach(i => {\n  //     nodesForUse.push({\n  //       id: i.id,\n  //       label: i.full_name,\n  //       shape: 'circle',\n  //       shadow: true,\n  //       scaling: {min: 0, max: 100, label: {enabled: true}},\n  //       selectable: true,\n  //       color: 'orange',\n  //       name: i.name,\n  //       conference: i.conference,\n  //       city: i.city,\n  //       abbreviation: i.abbreviation,\n  //       division: i.division,\n  //       group: i.division\n  //     });\n  //   })\n  //   : null;\n  // Object.keys(nodesDivisions).forEach(i => {\n  //   nodesForUse.push(nodesDivisions[i]);\n  // });\n\n  Object.keys(data).forEach(i => {\n    nodesForUse.push({...data[i], group: i, label: i, id: i});\n    if (!cluster[i]) {\n      Object.keys(data[i]).forEach(j => typeof data[i][j] === 'string' \n        ? nodesForUse.push({...data[i], group: i, label: i})\n        : nodesForUse.push({...data[i][j], group: i, label: j, id: j}));\n    }\n  });\n\n  const allEdges = nodesForUse.length \n    ? nodesForUse.map(i => {return({ source: i.group, target: i.label, value: 2 });}) : [];\n  const edges = allEdges;\n  const [width, height] = useWindowSize();\n  return (\n    <div className=\"main\">\n      <h1>Sun and Moon Data</h1>\n      <div className=\"main-layout\">\n        <div className=\"graph-3d\">\n          <NetworkChart\n            data={{nodes: nodesForUse, links: edges}}\n            nodeId={(d) => d.id + d.name} // given d in nodes, returns a unique identifier (string)\n            nodeGroup={d => d.group} // given d in nodes, returns an (ordinal) value for color\n            nodeGroups={Object.keys(data)} // an array of ordinal values representing the node groups\n            nodeTitle={(d) => d.name} // given d in nodes, a title string\n            nodeFill={'currentColor'} // node stroke fill (if not using a group color encoding)\n            nodeStroke={'#fff'} // node stroke color\n            nodeStrokeWidth={1} // node stroke width, in pixels\n            nodeStrokeOpacity={1} // node stroke opacity\n            nodeRadius={45} // node radius, in pixels\n            nodeStrength={90}\n            linkSource={({source}) => source} // given d in links, returns a node identifier string\n            linkTarget={({target}) => target} // given d in links, returns a node identifier string\n            linkStroke={'#999'} // link stroke color\n            linkStrokeOpacity={0.6} // link stroke opacity\n            linkStrokeWidth={5} // given d in links, returns a stroke width in pixels\n            linkStrokeLinecap={'round'} // link stroke linecap\n            linkStrength={20}\n            colors={10}\n            width={width - 100}\n            height={height - 100}\n            cluster={cluster}\n            handleSetCluster={handleSetCluster} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}