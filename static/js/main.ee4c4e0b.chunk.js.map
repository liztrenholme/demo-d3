{"version":3,"sources":["lib/sdk/env.js","lib/sdk/index.js","components/graph3d/networkD32.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["getData","page","a","console","log","url","data","fetch","API","then","blob","json","NetworkChart","props","nodeId","d","id","nodeGroup","nodeGroups","nodeTitle","name","nodeFill","nodeStroke","nodeStrokeWidth","nodeStrokeOpacity","nodeRadius","nodeStrength","linkSource","source","linkTarget","target","linkStroke","linkStrokeOpacity","linkStrokeWidth","linkStrokeLinecap","linkStrength","width","height","colors","d3","useState","contextmenuData","setContextmenuData","svgRef","useRef","contextRef","useEffect","dimensions","margins","containerWidth","containerHeight","svg","current","classed","attr","style","selectAll","remove","container","append","N","nodes","map","intern","links","undefined","_","i","T","G","W","L","color","forceNode","forceManyBody","forceLink1","forceLink","index","strength","simulation","forceSimulation","force","distance","distanceMin","distanceMax","forceCenter","on","link","x","y","node","call","dragstarted","dragged","dragended","text","city","group","zoom","event","select","transform","drag","evt","textElems","join","enter","transition","duration","selection","update","exit","html","label","division","conference","value","valueOf","active","alphaTarget","restart","subject","fx","fy","contextContainer","Object","keys","length","ref","className","Main","chart","setData","setPage","size","setSize","dataRes","fetchData","catch","e","handleAddPage","handleFetchData","response","prevData","newData","concat","nodesDivisions","Pacific","Southwest","Atlantic","Central","Southeast","Northwest","None","nodesForUse","forEach","push","full_name","shape","shadow","scaling","min","max","enabled","selectable","abbreviation","edges","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ee4c4e0b.chunk.js","sourcesContent":["export default {\n  API_KEY: 'ca93407b12msh6207f84fb92a18ep1d6b56jsn4ab719b2e4d0'\n};","import 'whatwg-fetch';\nimport API from './env';\n\nexport const getData = async (page) => {\n  console.log('page is...', page);\n  const url = `https://free-nba.p.rapidapi.com/teams?page=${page}`;\n\n  let data = {};\n  try {\n    data = await fetch(url, {\n      'method': 'GET',\n      'headers': {\n        'Content-Type': 'application/json',\n        'x-rapidapi-host': 'free-nba.p.rapidapi.com',\n        'x-rapidapi-key': API.API_KEY\n      }\n    })\n      .then(blob => blob.json());\n    console.log('data...', data);\n    return(data);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e, 'Error fetching data');\n    return(e);\n  }\n};","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport {drag} from 'd3-drag';\nimport {\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation,\n  forceCollide,\n  forceX,\n  forceY,\n  // forceProperties,\n} from 'd3-force';\nimport { zoom, zoomidentity } from 'd3-zoom';\n\nconst NetworkChart = (props) => {\n  let {data,\n    nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n    nodeGroup, // given d in nodes, returns an (ordinal) value for color\n    nodeGroups, // an array of ordinal values representing the node groups\n    nodeTitle = (d) => d.name, // given d in nodes, a title string\n    nodeFill = 'currentColor', // node stroke fill (if not using a group color encoding)\n    nodeStroke = '#fff', // node stroke color\n    nodeStrokeWidth = 1.5, // node stroke width, in pixels\n    nodeStrokeOpacity = 1, // node stroke opacity\n    nodeRadius = 25, // node radius, in pixels\n    nodeStrength,\n    linkSource = ({source}) => source, // given d in links, returns a node identifier string\n    linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n    linkStroke = '#999', // link stroke color\n    linkStrokeOpacity = 0.6, // link stroke opacity\n    linkStrokeWidth = 9.5, // given d in links, returns a stroke width in pixels\n    linkStrokeLinecap = 'round', // link stroke linecap\n    linkStrength,\n    width,\n    height} = props;\n  const colors = d3.schemeTableau10;\n  const [contextmenuData, setContextmenuData] = useState({});\n  const svgRef = useRef(null);\n  const contextRef = useRef(null);\n\n  useEffect(() => {\n    // D3 Code\n\n    // Dimensions\n    let dimensions = {\n      width: props.width,\n      height: props.height,\n      margins: 50,\n    };\n\n    dimensions.containerWidth = dimensions.width - dimensions.margins * 2;\n    dimensions.containerHeight = dimensions.height - dimensions.margins * 2;\n\n    // SELECTIONS\n    const svg = d3\n      .select(svgRef.current)\n      .classed('network-chart', true)\n      .attr('width', dimensions.width)\n      .attr('height', dimensions.height)\n      .style('background-color', '#f5f5f5');\n\n\n    // clear all previous content on refresh\n    const everything = svg.selectAll('*');\n    everything.remove();\n    \n    const container = svg\n      .append('g')\n      .classed('container', true)\n      .attr('transform', `translate(${dimensions.margins}, ${dimensions.margins})`);\n\n\n    const N = d3.map(data.nodes, nodeId).map(intern);\n    const LS = d3.map(data.links, linkSource).map(intern);\n    const LT = d3.map(data.links, linkTarget).map(intern);\n    if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n    const T = nodeTitle == null ? null : d3.map(data.nodes, nodeTitle);\n    const G = nodeGroup == null ? null : d3.map(data.nodes, nodeGroup).map(intern);\n    const W = typeof linkStrokeWidth !== 'function' ? null : d3.map(data.links, linkStrokeWidth);\n    const L = typeof linkStroke !== 'function' ? null : d3.map(data.links, linkStroke);\n  \n    // Replace the input nodes and links with mutable objects for the simulation.\n    const links = data.links.map(d => ({...d}));\n    const nodes = data.nodes.map(d => ({...d}));\n    \n    console.log('nodes', nodes);\n    console.log('links', links);\n    // Compute default domains.\n    if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n  \n    // Construct the scales.\n    const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n    // Construct the forces.\n    const forceNode = forceManyBody();\n    const forceLink1 = forceLink(links).id(({index: i}) => N[i]);\n    if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n    if (linkStrength !== undefined) forceLink1.strength(linkStrength);\n  \n    const simulation = forceSimulation(nodes)\n      .force('link', forceLink(links).id(d => d.id).distance(100))\n      .force('charge', forceManyBody().distanceMin(200).distanceMax(1000))\n      .force('center', forceCenter(width / 2, height / 2))\n      .on('tick', ticked);\n    \n    const link = container.append('g')\n      .attr('stroke', typeof linkStroke !== 'function' ? linkStroke : null)\n      .attr('stroke-opacity', linkStrokeOpacity)\n      .attr('stroke-width', typeof linkStrokeWidth !== 'function' ? linkStrokeWidth : null)\n      .attr('stroke-linecap', linkStrokeLinecap)\n      .selectAll('line')\n      .data(links)\n      .join( // join takes 3 args: enter, update, exit\n        enter => enter.append('line')\n          .attr('x1', d => d.source.x)\n          .attr('y1', d => d.source.y)\n          .attr('x2', d => d.target.x)\n          .attr('y2', d => d.target.y)\n          .transition().duration(1000)\n          .style('opacity', 1)\n        // Note that as of v6, we have to call .selection() here\n        // This is because without it, we are returning the transition we've created,\n        // but selection.join() requires us to return a selection for enter and update groups\n        // (but not exit groups)\n          .selection()\n        ,\n        update => update\n          .transition().duration(1000)\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      );\n  \n    const node = container.append('g')\n      .attr('fill', nodeFill)\n      .attr('stroke', nodeStroke)\n      .attr('stroke-opacity', nodeStrokeOpacity)\n      .attr('stroke-width', nodeStrokeWidth)\n      .selectAll('circle')\n      .data(nodes)\n      .join( // join takes 3 args: enter, update, exit\n        enter =>  enter.append('circle')\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .transition().duration(100)\n          .style('opacity', 1)\n          \n        // Note that as of v6, we have to call .selection() here\n        // This is because without it, we are returning the transition we've created,\n        // but selection.join() requires us to return a selection for enter and update groups\n        // (but not exit groups)\n          .selection()\n          .on('click', (d) => console.log('d', d))\n          .on('contextmenu', (event, d) => {\n            console.log('context!', event, d);\n            setContextmenuData(d);\n            var contextContainer = d3.select('circle').append('div');\n            contextContainer\n              .append('div')\n              .classed('context-info', true)\n              .html(`${d.label} <br> Division: ${d.division} <br> Conference: ${d.conference}`)\n              .style('left', d => (d.x + 50 + 'px'))\n              .style('top', d => (d.y +'px'));\n          }),\n        //   .on('mouseover', function (d) {\n        //     console.log('mouseover');\n        //     var div = d3.select(node).append('div')\n        //       .attr('pointer-events', 'none')\n        //       .attr('class', 'tooltip')\n        //       .style('opacity', 1)\n        //       .html('FIRST LINE <br> SECOND LINE')\n        //       .style('left', (d.x + 50 + 'px'))\n        //       .style('top', (d.y +'px'));\n        //   }),\n        update => update\n          .transition().duration(1000)\n          .attr('cx', d => d.x)\n          .attr('cy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      )\n      .attr('r', nodeRadius);\n\n    node.append('title')\n      .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n\n    const textElems = container\n      .append('g')\n      .selectAll('text')\n      .data(nodes)\n      .join( // join takes 3 args: enter, update, exit\n        enter => \n          enter\n            .append('text')\n            .text(node => node.label)\n            .attr('font-size',12)//font size\n            .attr('text-anchor', 'middle')\n            .attr('dx', node => node.x - 100)//positions text towards the left of the center of the circle\n            .attr('dy',node => node.y)\n            .attr('background-color', 'white')\n          // Note that as of v6, we have to call .selection() here\n          // This is because without it, we are returning the transition we've created,\n          // but selection.join() requires us to return a selection for enter and update groups\n          // (but not exit groups)\n            .selection(),\n        //   .on('mouseover', function (d) {\n        //     console.log('mouseover');\n        //     var div = d3.select(node).append('div')\n        //       .attr('pointer-events', 'none')\n        //       .attr('class', 'tooltip')\n        //       .style('opacity', 1)\n        //       .html('FIRST LINE <br> SECOND LINE')\n        //       .style('left', (d.x + 50 + 'px'))\n        //       .style('top', (d.y +'px'));\n        //   }),\n        update => update\n          .transition().duration(1000)\n          .attr('dx', d => d.x)\n          .attr('dy', d => d.y)\n          .selection(),\n        exit => exit\n          .remove()\n      );\n  \n    if (W) link.attr('stroke-width', ({index: i}) => W[i]);\n    if (L) link.attr('stroke', ({index: i}) => L[i]);\n    if (G) node.attr('fill', ({index: i}) => color(G[i]));\n    if (T) node.append('title').text(({index: i}) => T[i]);\n    // if (invalidation != null) invalidation.then(() => simulation.stop());\n  \n    function intern(value) {\n      return value !== null && typeof value === 'object' ? value.valueOf() : value;\n    }\n  \n    function ticked() {\n      link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n      node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y)\n        .call(d3.drag()\n          .on('start', dragstarted)\n          .on('drag', dragged)\n          .on('end', dragended))\n        .append('text', true)\n        .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n      svg     \n        .call(zoom().on('zoom', (event) => {   // <-- `event` argument attaches to svg\n          svg.select('g').attr('transform', event.transform); // <-- use `event` here on svg child\n        }))\n        .call(\n          drag().on('drag', (evt) => {\n            svg.attr('cx', evt.x).attr('cy', evt.y);\n          })\n        );\n      // .on('click', (d) => setContextmenuData({}));\n      textElems\n        .attr('dx', d => d.x)\n        .attr('dy', d => d.y)\n        .call(d3.drag()\n          .on('start', dragstarted)\n          .on('drag', dragged)\n          .on('end', dragended))\n        .append('text', true)\n        .text(d => (d.city || d.group) + ' ' + (d.name || ''));\n    }\n  \n\n    // Reheat the simulation when drag starts, and fix the subject position.\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n  \n    // Update the subject (dragged node) position during drag.\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n  \n    // Restore the target alpha so the simulation cools after dragging ends.\n    // Unfix the subject position now that it’s no longer being dragged.\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    const contextContainer = d3.select(contextRef.current)\n      .classed('context-div', true)\n      .attr('width',100)\n      .attr('height', 200);\n    if (contextmenuData && Object.keys(contextmenuData).length) {\n      console.log('context coords:', contextmenuData, contextmenuData.x);\n      // .attr('x', contextmenuData.x)\n      // .attr('y', contextmenuData.y);\n      contextContainer\n        .append('div')\n        .classed('context-info', true)\n        .html(`${contextmenuData.label} <br> Division: ${contextmenuData.division} <br> Conference: ${contextmenuData.conference}`)\n        .style('left', (contextmenuData.x + 50 + 'px'))\n        .style('top', (contextmenuData.y +'px'));\n    } else {\n      svg.selectAll('context-div').remove();\n    }\n  }, [props.data, svgRef.current, contextRef.current, contextmenuData]); // redraw chart if data changes\n\n  console.log('data in context menu?', contextmenuData);\n  return (<div>\n    <svg ref={svgRef} />\n    <div className=\"context-container\" ref={contextRef} />\n  </div>);\n};\n\nexport default NetworkChart;","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\n// import Network from '../network';\n// import Viz from '../graph3d/index';\n// import ForceGraph from '../graph3d/networkD3';\nimport NetworkChart from '../graph3d/networkD32';\n\nfunction Main () {\n  const [chart, setChart] = useState(null);\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [size, setSize] = useState([0, 0]);\n\n  function useWindowSize() {\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  useEffect(() => {\n    let dataRes = {};\n    const fetchData = async (page) => {\n      dataRes = await getData(page);\n      if (dataRes && dataRes.data) {\n        setData(dataRes.data);\n      }\n    };\n    if (!data.length) {\n      fetchData(page).catch((e) => {\n        console.log('error fetching', e);\n      });\n    }\n  }, [page, chart, data.length]);\n\n  const handleAddPage = async () => {\n    if (page === 2) {\n      return;\n    }\n    setPage(page + 1);\n    await handleFetchData(page + 1);\n  };\n\n  const handleFetchData = async (page) => {\n    const response = await getData(page);\n    const prevData = data;\n    if (response && response.data) {\n      const newData = prevData.concat(response.data);\n      setData(newData);\n    }\n  };\n\n  // selectNode = (id) => () => {\n  //   const {anchored} = this.state;\n  //   anchored.push(id);\n  //   // this.setState({anchored});\n  // }\n\n  const nodesDivisions = {\n    Pacific: {\n      id: 'Pacific',\n      group: 'Pacific',\n      name: 'Pacific',\n      label: 'Pacific'      \n    }, \n    Southwest: {\n      id: 'Southwest',\n      group: 'Southwest',\n      name: 'Southwest',\n      label: 'Southwest'\n    }, \n    Atlantic: {\n      id: 'Atlantic',\n      group: 'Atlantic',\n      name: 'Atlantic',\n      label: 'Atlantic'\n    }, \n    Central: {\n      id: 'Central',\n      group: 'Central',\n      name: 'Central',\n      label: 'Central'\n    }, \n    Southeast: {\n      id: 'Southeast',\n      group: 'Southeast',\n      name: 'Southeast',\n      label: 'Southeast'\n    }, \n    Northwest: {\n      id: 'Northwest',\n      group: 'Northwest',\n      name: 'Northwest',\n      label: 'Northwest'\n    },\n    None: {\n      id: 'None',\n      group: 'None',\n      name: 'No Longer Exist',\n      label: 'No Longer Exist'\n    }, \n  };\n  const nodesForUse = [];\n  // eslint-disable-next-line no-unused-expressions\n  data && data.length \n    ? data.forEach(i => {\n      nodesForUse.push({\n        id: i.id,\n        label: i.full_name,\n        shape: 'circle',\n        shadow: true,\n        scaling: {min: 0, max: 100, label: {enabled: true}},\n        selectable: true,\n        color: 'orange',\n        name: i.name,\n        conference: i.conference,\n        city: i.city,\n        abbreviation: i.abbreviation,\n        division: i.division,\n        group: i.division\n      });\n    })\n    : null;\n  Object.keys(nodesDivisions).forEach(i => {\n    nodesForUse.push(nodesDivisions[i]);\n  });\n\n  const allEdges = data && data.length \n    ? data.map(i => {return({ source: i.division || 'None', target: i.id, value: 2 });}) : [];\n  const edges = allEdges;\n  const [width, height] = useWindowSize();\n  return (\n    <div className=\"main\">\n      <h1>NBA Teams by Division</h1>\n      <div className='button-container'>\n        <button onClick={handleAddPage}>Add More Nodes</button>\n      </div>\n      <div className=\"main-layout\">\n        <div className=\"graph-3d\">\n          {/* <div dangerouslySetInnerHTML={{__html: svg}} /> */}\n          {/* {chart} */}\n          {/* {svg} */}\n          <NetworkChart\n            data={{nodes: nodesForUse, links: edges}}\n            nodeId={(d) => d.id + d.name} // given d in nodes, returns a unique identifier (string)\n            nodeGroup={d => d.group} // given d in nodes, returns an (ordinal) value for color\n            nodeGroups={Object.keys(nodesDivisions)} // an array of ordinal values representing the node groups\n            nodeTitle={(d) => d.name} // given d in nodes, a title string\n            nodeFill={'currentColor'} // node stroke fill (if not using a group color encoding)\n            nodeStroke={'#fff'} // node stroke color\n            nodeStrokeWidth={1} // node stroke width, in pixels\n            nodeStrokeOpacity={1} // node stroke opacity\n            nodeRadius={45} // node radius, in pixels\n            nodeStrength={90}\n            linkSource={({source}) => source} // given d in links, returns a node identifier string\n            linkTarget={({target}) => target} // given d in links, returns a node identifier string\n            linkStroke={'#999'} // link stroke color\n            linkStrokeOpacity={0.6} // link stroke opacity\n            linkStrokeWidth={5} // given d in links, returns a stroke width in pixels\n            linkStrokeLinecap={'round'} // link stroke linecap\n            linkStrength={20}\n            colors={10}\n            width={width - 100}\n            height={height - 100} />\n        </div>\n      </div>\n      {/* <footer>Data source: Johns Hopkins University via RapidAPI</footer> */}\n    </div>\n  );\n}\n\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}